<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.DiaryMapper">
    <insert id="createDiary" parameterType="com.example.demo.model.Diary">
        INSERT INTO posts (written_date, writer_id, diary_title, details)
        VALUES (#{writtenDate}, #{writerId}, #{diaryTitle}, #{details})
    </insert>
    
    <insert id="insertDiary" parameterType="com.example.demo.dto.DiaryWriteRequestDTO">
        INSERT INTO diaries (id, written_date, writer_id, diary_title, details)
        VALUES (#{id}, #{writtenDate}, #{writerId}, #{diaryTitle}, #{details});
    </insert>

    <update id="updateDiary" parameterType="com.example.demo.dto.DiaryEditRequestDTO">
        UPDATE diaries
        SET written_date = #{writtenDate},
            diary_title  = #{diaryTitle},
            writer_id    = #{writerId},
            details      = #{details}
        WHERE id = #{id};
    </update>

    <select id="requestDiaryDetails" resultType="com.example.demo.model.DiaryModel">
        SELECT d.id,
               d.written_date AS writtenDate,
               d.diary_title  AS diaryTitle,
               d.details,
               d.writer_id    AS writerId,
               u.first_name   AS firstName,
               u.last_name    AS lastName
        FROM diaries d
                 JOIN users u ON d.writer_id = u.id
        WHERE d.id = #{diaryId};
    </select>

    <delete id="deleteDiary">
        DELETE
        FROM diaries
        WHERE id = #{diaryId};
    </delete>

    <select id="requestAllTeamDiaries" resultType="com.example.demo.dto.TeamDiariesResponseDTO">
        SELECT DISTINCT d.id,
                        d.written_date AS writtenDate,
                        d.diary_title  AS diaryTitle,
                        u.first_name   AS firstName,
                        u.last_name    AS lastName,
                        u.color,
                        u.initial
        FROM members m
                 JOIN team_diary td ON td.team_id = m.team_id
                 JOIN diaries d ON d.id = td.diary_id
                 JOIN users u ON u.id = d.writer_id
        WHERE m.user_id = #{userId}
          AND m.status = 0;
    </select>

    <select id="requestDiaryId" resultType="com.example.demo.model.DiaryModel">
        SELECT id
        FROM diaries
        WHERE diary_title = #{diaryTitle}
          AND written_date = #{writtenDate}
          AND writer_id = #{writerId}
    </select>
</mapper>